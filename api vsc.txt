// pages/api/auth.ts
import type { NextApiRequest, NextApiResponse } from 'next';
import pool from '../../lib/db';
import { hash, compare } from 'bcryptjs';
import { sign } from 'jsonwebtoken';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === 'POST') {
    try { 
      const { email, password } = req.body;
      
      const [rows]: any = await pool.query(
        'SELECT * FROM admin_users WHERE email = ?',
        [email]
      );

      const user = rows[0];
      
      if (!user) {
        return res.status(401).json({ message: 'Invalid credentials' });
      }

      const isValid = await compare(password, user.password);
      
      if (!isValid) {
        return res.status(401).json({ message: 'Invalid credentials' });
      }

      const token = sign(
        { userId: user.id, email: user.email },
        process.env.JWT_SECRET!,
        { expiresIn: '1d' }
      );

      res.status(200).json({ token, user: { id: user.id, email: user.email } });
      
    } catch (error) {
      res.status(500).json({ message: 'Server error' });
    }
  }
}